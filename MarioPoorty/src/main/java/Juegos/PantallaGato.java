/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Juegos;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 *
 * @author Proyecto Dise√±o
 */
public class PantallaGato extends javax.swing.JFrame implements ActionListener{
	private JButton[][] GUIBoard = new JButton[3][3];
	private int[][] logica = new int[3][3];
	private ImageIcon iconNada = new ImageIcon(getClass().getResource("/Pics/nada50x50.png"));
	private ImageIcon iconP1 = new ImageIcon(getClass().getResource("/Pics/equis50x50.png"));
	private ImageIcon iconP2 = new ImageIcon(getClass().getResource("/Pics/circulo50x50.png"));
	private int jugadorQueJuega;
	private int persona;//si es p1 o p2 esta pantalla
	
	private int filaJugada = -1;
	private int columnaJugada = -1;
	private boolean jugando;
	
	public PantallaGato() {
		initComponents();
		hacerGato();
		jugadorQueJuega = 1;
		jugando = true;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlJuego = new javax.swing.JPanel();
        lblTurno = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTurno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pnlJuegoLayout = new javax.swing.GroupLayout(pnlJuego);
        pnlJuego.setLayout(pnlJuegoLayout);
        pnlJuegoLayout.setHorizontalGroup(
            pnlJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJuegoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        pnlJuegoLayout.setVerticalGroup(
            pnlJuegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlJuegoLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(lblTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(206, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlJuego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlJuego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	
	private void hacerGato(){
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				GUIBoard[i][j] = new JButton(iconNada);
				JButton boton = GUIBoard[i][j];
				pnlJuego.add(boton);
				boton.setBounds(22+50*i,75+50*j,50,50);
				boton.addActionListener(this);
				logica[i][j]=0;
			}
		}
	}
	
	public boolean revisarGane(){
		for (int i = 0; i < 3; i++) {
			if(logica[i][0] == logica[i][1] && logica[i][1] == logica[i][2] && logica[i][1] != 0){
				return true;
			}
			
			if(logica[0][i] == logica[1][i] && logica[1][i] == logica[2][i] && logica[1][i] != 0){
				return true;
			}
		}
		if(logica[0][0] == logica[1][1] && logica[1][1] == logica[2][2] && logica[1][1] != 0){
			return true;
		}
		if(logica[2][0] == logica[1][1] && logica[1][1] == logica[0][2] && logica[1][1] != 0){
			return true;
		}
		return false;
	}
	
	public boolean isLleno(){
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if(GUIBoard[i][j].getIcon() == iconNada){
					return false;
				}
			}
		}
		return true;
	}
	
	public void ponerEnGUI(int c, int f){ //SOLO PARA MARCAR EL DEL ENEMIGO
		logica[c][f] = jugadorQueJuega;
		if(persona == 1){
			GUIBoard[c][f].setIcon(iconP2);
		} else if(persona ==2){
			GUIBoard[c][f].setIcon(iconP1);
		}
		jugadorQueJuega = persona;
		lblTurno.setText("Va: " + jugadorQueJuega);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblTurno;
    private javax.swing.JPanel pnlJuego;
    // End of variables declaration//GEN-END:variables

	@Override
	public void actionPerformed(ActionEvent evt) {
		JButton boton = (JButton)evt.getSource();
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if(boton == GUIBoard[i][j]){
					columnaJugada = i;
					filaJugada = j;
					if(logica[i][j] != 0){
						return; //Si ya hay algo en esa casilla
					}
					if(persona != jugadorQueJuega){
						return; //si no es mi turno
					}
					if(persona == 1){
						boton.setIcon(iconP1);
//						logica[i][j] = 1;
						jugadorQueJuega++;
					} else if( persona == 2){
						boton.setIcon(iconP2);
//						logica[i][j] = 2;
						jugadorQueJuega--;
					}
					lblTurno.setText("Va " + jugadorQueJuega);
				}
			}
		}
	}
	
	public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PantallaGato p = new PantallaGato();
				p.setVisible(true);
				p.setPersona(1);
				p.setJugadorQueJuega(1);
            }
        });
    }
	
	//GETTER STERRESD

	public void setPersona(int persona) {
		this.persona = persona;
	}

	public boolean isJugando() {
		return jugando;
	}
	
	public void terminar(){
		this.jugando = false;
	}

	public int getFilaJugada() {
		return filaJugada;
	}

	public void setFilaJugada(int filaJugada) {
		this.filaJugada = filaJugada;
	}

	public int getColumnaJugada() {
		return columnaJugada;
	}

	public void setColumnaJugada(int columnaJugada) {
		this.columnaJugada = columnaJugada;
	}
	
	public void reiniciarColFila(){
		this.filaJugada = -1;
		this.columnaJugada = -1;
	}
	
	private void setJugadorQueJuega(int jugadorQueJuega){
		this.jugadorQueJuega = jugadorQueJuega;
	}
}
